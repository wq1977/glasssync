package com.example.cnwesleywang.myapplication;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.media.AudioManager;
import android.media.MediaScannerConnection;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPReply;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.util.ArrayList;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        mView = buildView("准备传输照片到手机...");
        setContentView(mView);

        PutMedia pm=new PutMedia();
        pm.execute();

        Log.d("MyGlassWare","My First Log should goes to console");

    }

    private String intToIp(int i) {

        return (i & 0xFF ) + "." +
                ((i >> 8 ) & 0xFF) + "." +
                ((i >> 16 ) & 0xFF) + ".1";
    }


    class PutMedia extends AsyncTask<Void,String,String>{

        int Total=0,Succ=0;

        @Override
        protected String doInBackground(Void... params) {
            FTPClient ftpClient = new FTPClient();
            WifiManager wifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE);
            //判断wifi是否开启
            if (!wifiManager.isWifiEnabled()) {
                return "Wifi not enabled!!!!";
            }
            WifiInfo wifiInfo = wifiManager.getConnectionInfo();
            int ipAddress = wifiInfo.getIpAddress();
            String ip = intToIp(ipAddress);
            Log.d("","My Ip address is:"+ip);


            Total = 0;
            ArrayList<String> files = new ArrayList<String>();
            for (int i=0;i<2;i++){
                ContentResolver resolver = getContentResolver();
                Cursor c;
                if (i==0) {
                    String[] projection = new String[]{MediaStore.Images.ImageColumns._ID, MediaStore.Images.ImageColumns.DATA};
                    c = resolver.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, projection, null, null, null);
                }
                else {
                    String[] projection = new String[]{MediaStore.Video.Media._ID, MediaStore.Video.Media.DATA};
                    c = resolver.query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, projection, null, null, null);
                }
                if (c!=null) {
                    Total+=c.getCount();
                    if (c.moveToFirst()) {
                        do {
                            String path;
                            if (i==0) {
                                path=c.getString(c.getColumnIndex(MediaStore.Images.ImageColumns.DATA));
                            }
                            else{
                                path=c.getString(c.getColumnIndex(MediaStore.Video.Media.DATA));
                            }
                            String[] remotes = path.split("/");
                            String remotename = remotes[remotes.length - 1];
                            Log.d("MyGlassWare", "Picture path: " + path + " " + remotename);

                            try {
                                ftpClient.connect(InetAddress.getByName(ip), 3721);
                                if (!ftpClient.login("", "")) {
                                    ftpClient.logout();
                                    return "Login to server fail!";
                                }
                                int reply = ftpClient.getReplyCode();
                                if (!FTPReply.isPositiveCompletion(reply)) {
                                    ftpClient.disconnect();
                                    return "unknown ftp fail!";
                                }
                                ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                                BufferedInputStream buffIn = null;
                                buffIn = new BufferedInputStream(new FileInputStream(path));
                                ftpClient.storeFile(remotename, buffIn);
                                buffIn.close();
                                ftpClient.logout();
                                ftpClient.disconnect();
                                Succ++;
                                this.publishProgress(String.format("成功传输了%d/%d张照片", Succ, Total));
                                files.add(path);
                            } catch (IOException e) {
                                Log.d("", "exception:", e);
                                return "Unknown exception!!!";
                            }
                        }
                        while (c.moveToNext());
                        c.close();
                    }
                }

                for (String path:files){
                    File file = new File(path);
                    if (file.delete()){
                        Log.d("","delete "+path+" succ");
                    }
                    else{
                        Log.d("","delete "+path+" fail!");
                    }
                    MediaScannerConnection.scanFile(
                            MainActivity.this,
                            new String[]{path},
                            null, null);
                }
            }
            return "";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);
            mView = buildView(values[0]);
            setContentView(mView);
        }

        @Override
        protected void onPostExecute(String result) {
            if (result=="") {
                mView = buildView(String.format("共%d张照片，成功传输了%d张照片",Total,Succ));
            }
            else{
                mView = buildView(result);
            }
            setContentView(mView);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();

    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView(String text) {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);
        card.setText(text);
        return card.getView();
    }

}
